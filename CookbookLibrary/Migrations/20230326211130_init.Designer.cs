// <auto-generated />
using CookbookLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CookbookLibrary.Migrations
{
    [DbContext(typeof(CookbookDbContext))]
    [Migration("20230326211130_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CookbookLibrary.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryId"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("categoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            categoryId = 1,
                            description = "Delicious breakfast recipes",
                            name = "Breakfast"
                        },
                        new
                        {
                            categoryId = 2,
                            description = "Tasty dinner recipes",
                            name = "Dinner"
                        },
                        new
                        {
                            categoryId = 3,
                            description = "Yummy desserts recipes",
                            name = "Desserts"
                        });
                });

            modelBuilder.Entity("CookbookLibrary.CategoryRecipe", b =>
                {
                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<int>("recipeId")
                        .HasColumnType("int");

                    b.HasKey("categoryId", "recipeId");

                    b.HasIndex("recipeId");

                    b.ToTable("CategoryRecipe");

                    b.HasData(
                        new
                        {
                            categoryId = 1,
                            recipeId = 1
                        },
                        new
                        {
                            categoryId = 2,
                            recipeId = 2
                        },
                        new
                        {
                            categoryId = 3,
                            recipeId = 3
                        });
                });

            modelBuilder.Entity("CookbookLibrary.Comment", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentId"));

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ratingId")
                        .HasColumnType("int");

                    b.HasKey("commentId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            commentId = 1,
                            comment = "Great recipe!",
                            ratingId = 1
                        },
                        new
                        {
                            commentId = 2,
                            comment = "I didn't like it very much",
                            ratingId = 2
                        },
                        new
                        {
                            commentId = 3,
                            comment = "This is my favorite dish",
                            ratingId = 3
                        });
                });

            modelBuilder.Entity("CookbookLibrary.Ingredient", b =>
                {
                    b.Property<int>("ingredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ingredientId"));

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ingredientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            ingredientId = 1,
                            category = "Protein",
                            name = "Egg"
                        },
                        new
                        {
                            ingredientId = 2,
                            category = "Dairy",
                            name = "Milk"
                        },
                        new
                        {
                            ingredientId = 3,
                            category = "Grains",
                            name = "Flour"
                        });
                });

            modelBuilder.Entity("CookbookLibrary.IngredientRecipe", b =>
                {
                    b.Property<int>("ingredientId")
                        .HasColumnType("int");

                    b.Property<int>("recipeId")
                        .HasColumnType("int");

                    b.Property<float>("quantity")
                        .HasColumnType("real");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ingredientId", "recipeId");

                    b.HasIndex("recipeId");

                    b.ToTable("IngredientRecipe");

                    b.HasData(
                        new
                        {
                            ingredientId = 1,
                            recipeId = 1,
                            quantity = 4f,
                            unit = "large"
                        },
                        new
                        {
                            ingredientId = 2,
                            recipeId = 1,
                            quantity = 0f,
                            unit = "cup"
                        },
                        new
                        {
                            ingredientId = 1,
                            recipeId = 2,
                            quantity = 1f,
                            unit = "pound"
                        },
                        new
                        {
                            ingredientId = 3,
                            recipeId = 2,
                            quantity = 8f,
                            unit = "kilo"
                        });
                });

            modelBuilder.Entity("CookbookLibrary.Rating", b =>
                {
                    b.Property<int>("ratingId")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<int>("recipeId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("ratingId");

                    b.HasIndex("recipeId");

                    b.HasIndex("userId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            ratingId = 1,
                            rating = 5,
                            recipeId = 1,
                            userId = 1
                        },
                        new
                        {
                            ratingId = 2,
                            rating = 2,
                            recipeId = 1,
                            userId = 2
                        },
                        new
                        {
                            ratingId = 3,
                            rating = 4,
                            recipeId = 2,
                            userId = 3
                        });
                });

            modelBuilder.Entity("CookbookLibrary.Recipe", b =>
                {
                    b.Property<int>("recipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("recipeId"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("instructions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("preparation_time")
                        .HasColumnType("float");

                    b.Property<int>("servings")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("recipeId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            recipeId = 1,
                            description = "A classic breakfast dish",
                            instructions = "1. Whisk eggs and milk together in a bowl. 2. Melt butter in a nonstick skillet over medium heat. 3. Pour egg mixture into skillet and cook, stirring occasionally, until eggs are set but still moist, about 3-5 minutes. 4. Season with salt and pepper to taste.",
                            preparation_time = 10.0,
                            servings = 2,
                            title = "Scrambled Eggs"
                        },
                        new
                        {
                            recipeId = 2,
                            description = "A delicious Italian dinner",
                            instructions = "1. Cook spaghetti according to package instructions. 2. Heat oil in a large skillet over medium-high heat. 3. Add ground beef and cook until browned, stirring occasionally. 4. Add onion, carrot, and celery and cook until vegetables are softened. 5. Add garlic and cook until fragrant. 6. Add tomato paste, crushed tomatoes, and beef broth and bring to a simmer. 7. Reduce heat and let simmer until sauce has thickened, about 20-30 minutes. 8. Season with salt and pepper to taste. 9. Serve over spaghetti.",
                            preparation_time = 45.0,
                            servings = 4,
                            title = "Spaghetti Bolognese"
                        },
                        new
                        {
                            recipeId = 3,
                            description = "A classic American dessert",
                            instructions = "1. Preheat oven to 375°F. 2. Cream together butter, white sugar, and brown sugar until smooth. 3. Beat in eggs one at a time, then stir in vanilla. 4. Dissolve baking soda in hot water and add to batter. 5. Stir in flour, chocolate chips, and nuts. 6. Drop by large spoonfuls onto ungreased pans. 7. Bake for about 10 minutes or until edges are nicely browned.",
                            preparation_time = 30.0,
                            servings = 24,
                            title = "Chocolate Chip Cookies"
                        });
                });

            modelBuilder.Entity("CookbookLibrary.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            userId = 1,
                            email = "johnsmith@gmail.com",
                            password = "Abcd1234!",
                            username = "johnsmith"
                        },
                        new
                        {
                            userId = 2,
                            email = "janedoe@yahoo.com",
                            password = "Efg4567@",
                            username = "janedoe"
                        },
                        new
                        {
                            userId = 3,
                            email = "pkow2137@student.polsl.com",
                            password = "2137",
                            username = "pkow"
                        });
                });

            modelBuilder.Entity("CookbookLibrary.UserRecipe", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int>("recipeId")
                        .HasColumnType("int");

                    b.HasKey("userId", "recipeId");

                    b.HasIndex("recipeId");

                    b.ToTable("UserRecipe");

                    b.HasData(
                        new
                        {
                            userId = 1,
                            recipeId = 1
                        },
                        new
                        {
                            userId = 2,
                            recipeId = 3
                        },
                        new
                        {
                            userId = 3,
                            recipeId = 2
                        });
                });

            modelBuilder.Entity("CookbookLibrary.CategoryRecipe", b =>
                {
                    b.HasOne("CookbookLibrary.Category", "Category")
                        .WithMany("CategoryRecipes")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CookbookLibrary.Recipe", "Recipe")
                        .WithMany("CategoryRecipes")
                        .HasForeignKey("recipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("CookbookLibrary.IngredientRecipe", b =>
                {
                    b.HasOne("CookbookLibrary.Ingredient", "Ingredient")
                        .WithMany("IngredientRecipes")
                        .HasForeignKey("ingredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CookbookLibrary.Recipe", "Recipe")
                        .WithMany("IngredientRecipes")
                        .HasForeignKey("recipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("CookbookLibrary.Rating", b =>
                {
                    b.HasOne("CookbookLibrary.Comment", "Comment")
                        .WithOne("Rating")
                        .HasForeignKey("CookbookLibrary.Rating", "ratingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CookbookLibrary.Recipe", "Recipe")
                        .WithMany("Ratings")
                        .HasForeignKey("recipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CookbookLibrary.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CookbookLibrary.UserRecipe", b =>
                {
                    b.HasOne("CookbookLibrary.Recipe", "Recipe")
                        .WithMany("UserRecipes")
                        .HasForeignKey("recipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CookbookLibrary.User", "User")
                        .WithMany("UserRecipes")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CookbookLibrary.Category", b =>
                {
                    b.Navigation("CategoryRecipes");
                });

            modelBuilder.Entity("CookbookLibrary.Comment", b =>
                {
                    b.Navigation("Rating")
                        .IsRequired();
                });

            modelBuilder.Entity("CookbookLibrary.Ingredient", b =>
                {
                    b.Navigation("IngredientRecipes");
                });

            modelBuilder.Entity("CookbookLibrary.Recipe", b =>
                {
                    b.Navigation("CategoryRecipes");

                    b.Navigation("IngredientRecipes");

                    b.Navigation("Ratings");

                    b.Navigation("UserRecipes");
                });

            modelBuilder.Entity("CookbookLibrary.User", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("UserRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
